(:
 : Elemental
 : Copyright (C) 2024, Evolved Binary Ltd
 :
 : admin@evolvedbinary.com
 : https://www.evolvedbinary.com | https://www.elemental.xyz
 :
 : Use of this software is governed by the Business Source License 1.1
 : included in the LICENSE file and at www.mariadb.com/bsl11.
 :
 : Change Date: 2028-04-27
 :
 : On the date above, in accordance with the Business Source License, use
 : of this software will be governed by the Apache License, Version 2.0.
 :
 : Additional Use Grant: Production use of the Licensed Work for a permitted
 : purpose. A Permitted Purpose is any purpose other than a Competing Use.
 : A Competing Use means making the Software available to others in a commercial
 : product or service that: substitutes for the Software; substitutes for any
 : other product or service we offer using the Software that exists as of the
 : date we make the Software available; or offers the same or substantially
 : similar functionality as the Software.
 :)
xquery version "3.1";

(:~
 : Resource functions for testing XQSuite assertions.
 : These are utilised from: xqsuite-assertions-inline.xqm,
 : and xqsuite-assertions-dynamic.xqm.
 :
 : @author Adam Retter
 :)
module namespace xqtares = "http://exist-db.org/xquery/xqsuite/test/assertions/resources";

declare namespace test = "http://exist-db.org/xquery/xqsuite";

declare
    %test:assertTrue
function xqtares:assertTrue-assertion-when-true() {
    fn:true()
};

declare
    %test:assertTrue
function xqtares:assertTrue-assertion-when-false() {
    fn:false()
};

declare
    %test:assertTrue
function xqtares:assertTrue-assertion-when-error() {
    fn:error(xs:QName("xqtares:error1"))
};

declare
    %test:assertFalse
function xqtares:assertFalse-assertion-when-true() {
    fn:true()
};

declare
    %test:assertFalse
function xqtares:assertFalse-assertion-when-false() {
    fn:false()
};

declare
    %test:assertFalse
function xqtares:assertFalse-assertion-when-error() {
    fn:error(xs:QName("xqtares:error1"))
};

declare
    %test:assertError("xqtares:error1")
function xqtares:assertError-assertion-when-error() {
    fn:error(xs:QName("xqtares:error1"))
};

declare
    %test:assertError("xqtares:error1")
function xqtares:assertError-assertion-when-unexpected-error() {
    fn:error(xs:QName("xqtares:error2"))
};

declare
    %test:assertError("err:XPTY0004")
function xqtares:assertError-assertion-when-expected-error() {
    array:put(["a", "b", "c", "d"], 1.5, "x")?*
};

declare
    %test:assertError("xqtares:error1")
function xqtares:assertError-assertion-when-different-error() {
    array:put(["a", "b", "c", "d"], 1.5, "x")?*
};

declare
    %test:assertError("xqtares:error1")
function xqtares:assertError-assertion-when-true() {
    fn:true()
};

declare
    %test:assertError("xqtares:error1")
function xqtares:assertError-assertion-when-false() {
    fn:false()
};

declare
    %test:assertError("xqtares:error1")
function xqtares:assertError-assertion-when-empty() {
    ()
};

declare
    %test:assertError("xqtares:error1")
function xqtares:assertError-assertion-when-non-empty() {
    (<non-error/>, "non-error", 123)
};

declare
    %test:assertError("xqtares:error1")
function xqtares:assertError-assertion-when-element() {
    <non-error/>
};

declare
    %test:assertError("xqtares:error1")
function xqtares:assertError-assertion-when-string() {
    "non-error"
};

declare
    %test:assertError("xqtares:error1")
function xqtares:assertError-assertion-when-integer() {
    xs:integer(123)
};
