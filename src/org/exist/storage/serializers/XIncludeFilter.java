package org.exist.storage.serializers;

import java.io.StringReader;
import java.util.Iterator;

import org.apache.log4j.Logger;
import org.exist.EXistException;
import org.exist.dom.DocumentImpl;
import org.exist.dom.DocumentSet;
import org.exist.dom.NodeProxy;
import org.exist.dom.NodeSet;
import org.exist.parser.XPathLexer;
import org.exist.parser.XPathParser;
import org.exist.security.PermissionDeniedException;
import org.exist.storage.BrokerPool;
import org.exist.util.XMLUtil;
import org.exist.xpath.PathExpr;
import org.exist.xpath.StaticContext;
import org.exist.xpath.Value;
import org.exist.xpath.ValueSet;
import org.xml.sax.Attributes;
import org.xml.sax.ContentHandler;
import org.xml.sax.Locator;
import org.xml.sax.SAXException;

import antlr.RecognitionException;
import antlr.TokenStreamException;

/**
 * Used to filter the SAX stream generated by the
 * serializer for XInclude statements. 
 */
public class XIncludeFilter implements ContentHandler {

	private final static Logger LOG = 
		Logger.getLogger(XIncludeFilter.class);
	
	public final static String XINCLUDE_NS = 
		"http://www.w3.org/2001/XInclude";
	
	private ContentHandler contentHandler;
	private Serializer serializer;
	private DocumentImpl document = null;
	
	public XIncludeFilter(Serializer serializer, ContentHandler contentHandler) {
		this.contentHandler = contentHandler;
		this.serializer = serializer;
	}

	public XIncludeFilter(Serializer serializer) {
		this( serializer, null );
	}
	
	public void setContentHandler(ContentHandler handler) {
		this.contentHandler = handler;
	}
	
	public ContentHandler getContentHandler() {
		return contentHandler;
	}
	
	public void setDocument(DocumentImpl doc) {
		document = doc;
	}
	
	/**
	 * @see org.xml.sax.ContentHandler#characters(char, int, int)
	 */
	public void characters(char[] ch, int start, int length)
		throws SAXException {
		contentHandler.characters(ch, start, length);
	}

	/**
	 * @see org.xml.sax.ContentHandler#endDocument()
	 */
	public void endDocument() throws SAXException {
		contentHandler.endDocument();
	}

	/**
	 * @see org.xml.sax.ContentHandler#endElement(java.lang.String, java.lang.String, java.lang.String)
	 */
	public void endElement(String namespaceURI, String localName, String qName)
		throws SAXException {
		if(namespaceURI != null && (!namespaceURI.equals(XINCLUDE_NS)))
		contentHandler.endElement(namespaceURI, localName, qName);
	}

	/**
	 * @see org.xml.sax.ContentHandler#endPrefixMapping(java.lang.String)
	 */
	public void endPrefixMapping(String prefix) throws SAXException {
		contentHandler.endPrefixMapping(prefix);
	}

	/**
	 * @see org.xml.sax.ContentHandler#ignorableWhitespace(char, int, int)
	 */
	public void ignorableWhitespace(char[] ch, int start, int length)
		throws SAXException {
		contentHandler.ignorableWhitespace(ch, start, length);
	}

	/**
	 * @see org.xml.sax.ContentHandler#processingInstruction(java.lang.String, java.lang.String)
	 */
	public void processingInstruction(String target, String data)
		throws SAXException {
		contentHandler.processingInstruction(target, data);
	}

	/**
	 * @see org.xml.sax.ContentHandler#setDocumentLocator(org.xml.sax.Locator)
	 */
	public void setDocumentLocator(Locator locator) {
		contentHandler.setDocumentLocator(locator);
	}

	/**
	 * @see org.xml.sax.ContentHandler#skippedEntity(java.lang.String)
	 */
	public void skippedEntity(String name) throws SAXException {
		contentHandler.skippedEntity(name);
	}

	/**
	 * @see org.xml.sax.ContentHandler#startDocument()
	 */
	public void startDocument() throws SAXException {
		contentHandler.startDocument();
	}

	/**
	 * @see org.xml.sax.ContentHandler#startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)
	 */
	public void startElement(
		String namespaceURI,
		String localName,
		String qName,
		Attributes atts)
		throws SAXException {
		if(namespaceURI != null && namespaceURI.equals(XINCLUDE_NS)) {
			LOG.debug("found xinclude element");
			if(localName.equals("include")) {
				LOG.debug("processing include ...");
				processXInclude(atts);
			}
		} else {
			contentHandler.startElement(namespaceURI, localName, qName,
				atts);
		}
	}

	protected void processXInclude(Attributes atts) throws SAXException {
		// save some settings
		DocumentImpl prevDoc = document;
		boolean createContainerElements = serializer.createContainerElements;
		serializer.createContainerElements = false;
		
		// parse the href attribute
		String href = atts.getValue("href");
		if(href != null) {
			LOG.debug("found href=\"" + href + "\"");
			String xpointer = null;
			String docName = href;
			// try to find xpointer part
			int p = href.indexOf('#');
			if(-1 < p) {
				docName = href.substring(0, p);
				xpointer = XMLUtil.decodeAttrMarkup(href.substring(p + 1));
				LOG.debug("found xpointer: " + xpointer);
			}
			// if docName has no collection specified, assume
			// current collection 
			p = docName.lastIndexOf('/');
			if(p < 0)
				docName = document.getCollection().getName() + '/' +
					docName;
			// retrieve the document
			LOG.debug("loading " + docName);
			DocumentImpl doc = null;
			try {
				doc =
					(DocumentImpl)serializer.broker.getDocument(docName);
			} catch (PermissionDeniedException e) {
				LOG.warn("permission denied", e);
				throw new SAXException(e);
			}
			/* if document has not been found and xpointer is
			 * null, throw an exception. If xpointer != null
			 * we retry below and interpret docName as
			 * a collection.
			 */
			if(doc == null && xpointer == null)
				throw new SAXException("document " + docName +
					" not found");
			if(xpointer == null)
				// no xpointer found - just serialize the doc
				serializer.serializeToSAX( doc, false );
			else {
				// process the xpointer
				try {
					// build input document set
					DocumentSet docs = null;
					if(doc == null) {
						// try to read documents from the collection
						// specified by docName
						docs = 
							serializer.broker.getDocumentsByCollection(docName);
						// give up
						if(docs == null)
							throw new SAXException("no document or collection " +
								"called " + docName);
					} else {
						docs = new DocumentSet();
						docs.add(doc);
					}
					XPathLexer lexer = 
						new XPathLexer( new StringReader( xpointer ) );
					BrokerPool pool = serializer.broker.getBrokerPool();
					XPathParser parser = 
						new XPathParser( pool, serializer.getUser(), lexer );
					StaticContext context = new StaticContext();
					PathExpr expr = new PathExpr(pool);
					parser.xpointer( expr );
					LOG.info( "xpointer query: " + expr.pprint() );
					long start = System.currentTimeMillis();
					if ( parser.foundErrors() )
						throw new SAXException(parser.getErrorMsg());
					docs = expr.preselect( docs );
					if ( docs.getLength() == 0 )
						return;
					Value resultValue = expr.eval( context, docs, null, null );
					switch(resultValue.getType()) {
						case Value.isNodeList:
							NodeSet set = (NodeSet)resultValue.getNodeList();
							LOG.info("xpointer found: " + set.getLength());
					
							NodeProxy proxy;
							for(Iterator i = set.iterator(); i.hasNext(); ) {
								proxy = (NodeProxy)i.next();
								serializer.serializeToSAX(proxy, false);
							}
							break;
						default:
							ValueSet values = resultValue.getValueSet();
							String val;
							for(int i = 0; i < values.getLength(); i++) {
								val = values.get(i).getStringValue();
								characters(val.toCharArray(), 0, val.length());
							}
							break;
					}
								
				} catch (RecognitionException e) {
					LOG.warn("xpointer error", e);
					throw new SAXException(e);
				} catch (TokenStreamException e) {
					LOG.warn("xpointer error", e);
					throw new SAXException(e);
				} catch (PermissionDeniedException e) {
					LOG.warn("xpointer error", e);
					throw new SAXException(e);
				} catch (EXistException e) {
					LOG.warn("xpointer error", e);
					throw new SAXException(e);
				}
			}
		}
		// restore settings
		document = prevDoc;
		serializer.createContainerElements = createContainerElements;
	}
	
	/**
	 * @see org.xml.sax.ContentHandler#startPrefixMapping(java.lang.String, java.lang.String)
	 */
	public void startPrefixMapping(String prefix, String uri)
		throws SAXException {
		contentHandler.startPrefixMapping(prefix, uri);
	}

}
