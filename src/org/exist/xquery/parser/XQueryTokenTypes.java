// $ANTLR 2.7.4: "XQuery.g" -> "XQueryParser.java"$

	package org.exist.xquery.parser;

	import antlr.debug.misc.*;
	import java.io.StringReader;
	import java.io.BufferedReader;
	import java.io.InputStreamReader;
	import java.util.ArrayList;
	import java.util.List;
	import java.util.Iterator;
	import java.util.Stack;
	import org.exist.storage.BrokerPool;
	import org.exist.storage.DBBroker;
	import org.exist.storage.analysis.Tokenizer;
	import org.exist.EXistException;
	import org.exist.dom.DocumentSet;
	import org.exist.dom.DocumentImpl;
	import org.exist.dom.QName;
	import org.exist.security.PermissionDeniedException;
	import org.exist.security.User;
	import org.exist.xquery.*;
	import org.exist.xquery.value.*;
	import org.exist.xquery.functions.*;

public interface XQueryTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int QNAME = 4;
	int PREDICATE = 5;
	int FLWOR = 6;
	int PARENTHESIZED = 7;
	int ABSOLUTE_SLASH = 8;
	int ABSOLUTE_DSLASH = 9;
	int WILDCARD = 10;
	int PREFIX_WILDCARD = 11;
	int FUNCTION = 12;
	int UNARY_MINUS = 13;
	int UNARY_PLUS = 14;
	int XPOINTER = 15;
	int XPOINTER_ID = 16;
	int VARIABLE_REF = 17;
	int VARIABLE_BINDING = 18;
	int ELEMENT = 19;
	int ATTRIBUTE = 20;
	int TEXT = 21;
	int VERSION_DECL = 22;
	int NAMESPACE_DECL = 23;
	int DEF_NAMESPACE_DECL = 24;
	int DEF_COLLATION_DECL = 25;
	int DEF_FUNCTION_NS_DECL = 26;
	int GLOBAL_VAR = 27;
	int FUNCTION_DECL = 28;
	int PROLOG = 29;
	int ATOMIC_TYPE = 30;
	int MODULE = 31;
	int ORDER_BY = 32;
	int POSITIONAL_VAR = 33;
	int BEFORE = 34;
	int AFTER = 35;
	int MODULE_DECL = 36;
	int ATTRIBUTE_TEST = 37;
	int COMP_ELEM_CONSTRUCTOR = 38;
	int COMP_ATTR_CONSTRUCTOR = 39;
	int COMP_TEXT_CONSTRUCTOR = 40;
	int COMP_COMMENT_CONSTRUCTOR = 41;
	int COMP_PI_CONSTRUCTOR = 42;
	int COMP_NS_CONSTRUCTOR = 43;
	int COMP_DOC_CONSTRUCTOR = 44;
	int LITERAL_xpointer = 45;
	int LPAREN = 46;
	int RPAREN = 47;
	int NCNAME = 48;
	int LITERAL_xquery = 49;
	int LITERAL_version = 50;
	int SEMICOLON = 51;
	int LITERAL_module = 52;
	int LITERAL_namespace = 53;
	int EQ = 54;
	int STRING_LITERAL = 55;
	int LITERAL_import = 56;
	int LITERAL_declare = 57;
	int LITERAL_default = 58;
	int LITERAL_xmlspace = 59;
	int LITERAL_ordering = 60;
	int LITERAL_construction = 61;
	int LITERAL_function = 62;
	int LITERAL_variable = 63;
	int LITERAL_collation = 64;
	int LITERAL_element = 65;
	int LITERAL_preserve = 66;
	int LITERAL_strip = 67;
	int LITERAL_ordered = 68;
	int LITERAL_unordered = 69;
	int DOLLAR = 70;
	int LCURLY = 71;
	int RCURLY = 72;
	int LITERAL_at = 73;
	int LITERAL_as = 74;
	int COMMA = 75;
	int LITERAL_empty = 76;
	int QUESTION = 77;
	int STAR = 78;
	int PLUS = 79;
	int LITERAL_item = 80;
	int LITERAL_for = 81;
	int LITERAL_let = 82;
	int LITERAL_some = 83;
	int LITERAL_every = 84;
	int LITERAL_if = 85;
	int LITERAL_where = 86;
	int LITERAL_return = 87;
	int LITERAL_in = 88;
	int COLON = 89;
	int LITERAL_order = 90;
	int LITERAL_by = 91;
	int LITERAL_ascending = 92;
	int LITERAL_descending = 93;
	int LITERAL_greatest = 94;
	int LITERAL_least = 95;
	int LITERAL_satisfies = 96;
	int LITERAL_typeswitch = 97;
	int LITERAL_case = 98;
	int LITERAL_then = 99;
	int LITERAL_else = 100;
	int LITERAL_or = 101;
	int LITERAL_and = 102;
	int LITERAL_instance = 103;
	int LITERAL_of = 104;
	int LITERAL_castable = 105;
	int LITERAL_cast = 106;
	int LT = 107;
	int GT = 108;
	int LITERAL_eq = 109;
	int LITERAL_ne = 110;
	int LITERAL_lt = 111;
	int LITERAL_le = 112;
	int LITERAL_gt = 113;
	int LITERAL_ge = 114;
	int NEQ = 115;
	int GTEQ = 116;
	int LTEQ = 117;
	int LITERAL_is = 118;
	int LITERAL_isnot = 119;
	int ANDEQ = 120;
	int OREQ = 121;
	int LITERAL_to = 122;
	int MINUS = 123;
	int LITERAL_div = 124;
	int LITERAL_idiv = 125;
	int LITERAL_mod = 126;
	int LITERAL_union = 127;
	int UNION = 128;
	int LITERAL_intersect = 129;
	int LITERAL_except = 130;
	int SLASH = 131;
	int DSLASH = 132;
	int LITERAL_text = 133;
	int LITERAL_node = 134;
	int LITERAL_attribute = 135;
	int LITERAL_comment = 136;
	// "processing-instruction" = 137
	// "document-node" = 138
	int LITERAL_document = 139;
	int SELF = 140;
	int XML_COMMENT = 141;
	int XML_PI = 142;
	int LPPAREN = 143;
	int RPPAREN = 144;
	int AT = 145;
	int PARENT = 146;
	int LITERAL_child = 147;
	int LITERAL_self = 148;
	int LITERAL_descendant = 149;
	// "descendant-or-self" = 150
	// "following-sibling" = 151
	int LITERAL_following = 152;
	int LITERAL_parent = 153;
	int LITERAL_ancestor = 154;
	// "ancestor-or-self" = 155
	// "preceding-sibling" = 156
	int DOUBLE_LITERAL = 157;
	int DECIMAL_LITERAL = 158;
	int INTEGER_LITERAL = 159;
	int END_TAG_START = 160;
	int QUOT = 161;
	int APOS = 162;
	int ATTRIBUTE_CONTENT = 163;
	int ELEMENT_CONTENT = 164;
	int XML_COMMENT_END = 165;
	int XML_PI_END = 166;
	int XML_CDATA = 167;
	int LITERAL_collection = 168;
	int LITERAL_preceding = 169;
	int XML_PI_START = 170;
	int XML_CDATA_START = 171;
	int XML_CDATA_END = 172;
	int LETTER = 173;
	int DIGITS = 174;
	int HEX_DIGITS = 175;
	int NMSTART = 176;
	int NMCHAR = 177;
	int WS = 178;
	int EXPR_COMMENT = 179;
	int PRAGMA = 180;
	int PRAGMA_CONTENT = 181;
	int PRAGMA_QNAME = 182;
	int PREDEFINED_ENTITY_REF = 183;
	int CHAR_REF = 184;
	int NEXT_TOKEN = 185;
	int CHAR = 186;
	int BASECHAR = 187;
	int IDEOGRAPHIC = 188;
	int COMBINING_CHAR = 189;
	int DIGIT = 190;
	int EXTENDER = 191;
}
