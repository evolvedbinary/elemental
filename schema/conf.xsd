<?xml version="1.0" encoding="UTF-8"?>

<!-- 
    Schema for eXist Configuration file conf.xml
    
    TODO: Remove optional attributes in favour of well defined/named parent elements
-->

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:vc="http://www.w3.org/2007/XMLSchema-versioning" vc:minVersion="1.1"
           version="1.0.0">
    
    <!-- Shared types -->
    <xs:simpleType name="yes_no">
        <xs:restriction base="xs:string">
            <xs:enumeration value="yes"/>
            <xs:enumeration value="no"/>
        </xs:restriction>
    </xs:simpleType>
    
    <xs:element name="parameter">
        <xs:complexType>
            <xs:attribute name="name" type="xs:string">
                <xs:annotation>
                    <xs:documentation>
                        The name of the parameter
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="value" type="xs:string">
                <xs:annotation>
                    <xs:documentation>
                        The value of the parameter
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    
    <!-- Root element -->
    <xs:element name="exist">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="db-connection">
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="startup" minOccurs="0">
                                <xs:complexType>
                                    <xs:sequence>
                                        <xs:element name="triggers" minOccurs="0">
                                            <xs:complexType>
                                                <xs:sequence>
                                                    <xs:element name="trigger" minOccurs="0" maxOccurs="unbounded">
                                                        <xs:complexType>
                                                            <xs:sequence>
                                                                <xs:element ref="parameter" minOccurs="0" maxOccurs="unbounded"/>
                                                            </xs:sequence>
                                                            <xs:attribute name="class" type="xs:string">
                                                                <xs:annotation>
                                                                    <xs:documentation>
                                                                        The full class name of the trigger implementation
                                                                    </xs:documentation>
                                                                </xs:annotation>
                                                            </xs:attribute>
                                                        </xs:complexType>
                                                    </xs:element>
                                                </xs:sequence>
                                            </xs:complexType>
                                        </xs:element>
                                    </xs:sequence>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="pool">
                                <xs:complexType>
                                    <xs:attribute name="max" type="xs:integer" default="20">
                                        <xs:annotation>
                                            <xs:documentation>
                                                Maximum number of connections allowed.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                    <xs:attribute name="min" type="xs:integer" default="1">
                                        <xs:annotation>
                                            <xs:documentation>
                                                Minimum number of connections to keep alive.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                    <xs:attribute name="sync-period" type="xs:integer" default="120000">
                                        <xs:annotation>
                                            <xs:documentation>
                                                Defines how often the database will flush its
                                                internal buffers to disk. The sync thread will interrupt
                                                normal database operation after the specified number of
                                                milliseconds and write all dirty pages to disk.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                    <xs:attribute name="wait-before-shutdown" type="xs:integer" default="120000">
                                        <xs:annotation>
                                            <xs:documentation>
                                                Defines how long the database instance will wait for running
                                                operations to complete before it forces a shutdown. Forcing
                                                a shutdown may leave the db in an unclean state and may
                                                trigger a recovery run on restart.
                                                <p/>
                                                Setting wait-before-shutdown="-1" means that the server will
                                                wait for all threads to return, no matter how long it takes.
                                                No thread will be killed.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="query-pool" minOccurs="0" maxOccurs="1">
                                <xs:complexType>
                                    <xs:attribute name="max-stack-size" type="xs:integer" default="5">
                                        <xs:annotation>
                                            <xs:documentation>
                                                Maximum number of queries in the query-pool.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                    <xs:attribute name="size" type="xs:integer" default="128">
                                        <xs:annotation>
                                            <xs:documentation>
                                                Number of copies of the same query kept in the query-pool.
                                                Value "-1" effectively disables caching. Queries cannot be shared
                                                by threads, each thread needs a private copy of a query.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="recovery">
                                <xs:complexType>
                                    <xs:attribute name="enabled" type="yes_no" default="yes">
                                        <xs:annotation>
                                            <xs:documentation>
                                                If this attribute is set to yes, automatic recovery is enabled.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                    <xs:attribute name="group-commit" type="yes_no" default="no">
                                        <xs:annotation>
                                            <xs:documentation>
                                                If set to "yes", eXist will not sync the journal file
                                                immediately after every transaction commit. Instead,
                                                it will wait until the current file buffer (32kb)
                                                is really full. This can speed up eXist on some systems
                                                where a file sync is an expensive operation (mainly windows
                                                XP; not necessary on Linux). However, group-comit="yes"
                                                will increase the risk of an already committed
                                                operation being rolled back after a database crash.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                    <xs:attribute name="journal-dir" type="xs:string" default="webapp/WEB-INF/data">
                                        <xs:annotation>
                                            <xs:documentation>
                                                This attribute sets the directory where journal files are to be
                                                written. If no directory is specified, the default path is to
                                                the data directory.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                    <xs:attribute name="size" type="xs:string" default="100M">
                                        <xs:annotation>
                                            <xs:documentation>
                                                This attributes sets the maximum allowed size of the journal
                                                file. Once the journal reaches this limit, a checkpoint will be
                                                triggered and the journal will be cleaned. However, the database
                                                waits for running transactions to return before processing this
                                                checkpoint. In the event one of these transactions writes a lot
                                                of data to the journal file, the file will grow until the
                                                transaction has completed. Hence, the size limit is not enforced
                                                in all cases.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                    <xs:attribute name="sync-on-commit" type="yes_no" default="no">
                                        <xs:annotation>
                                            <xs:documentation>
                                                This attribute determines whether or not to protect the journal
                                                during operating system failures. That is, it determines whether
                                                the database forces a file-sync on the journal after every
                                                commit.
                                                <p/>
                                                If this attribute is set to "yes", the journal is protected
                                                against operating system failures. However, this will slow
                                                performance - especially on Windows systems.
                                                <p/>
                                                If set to "no", eXist will rely on the operating system to flush
                                                out the journal contents to disk. In the worst case scenario,
                                                in which there is a complete system failure, some committed
                                                transactions might not have yet been written to the journal,
                                                and so will be rolled back.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                    <xs:attribute name="force-restart" type="yes_no" default="no">
                                        <xs:annotation>
                                            <xs:documentation>
                                                Try to restart the db even if crash recovery failed. This is
                                                dangerous because there might be corruptions inside the
                                                data files. The transaction log will be cleared, all locks removed
                                                and the db reindexed.
                                                <p/>
                                                Set this option to "yes" if you need to make sure that the db is
                                                online, even after a fatal crash. Errors encountered during recovery
                                                are written to the log files. Scan the log files to see if any problems
                                                occurred.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                    <xs:attribute name="consistency-check" type="yes_no" default="yes">
                                        <xs:annotation>
                                            <xs:documentation>
                                                If set to "yes", a consistency check will be run on the database
                                                if an error was detected during crash recovery. This option requires
                                                force-restart to be set to "yes", otherwise it has no effect.
                                                <p/>
                                                The consistency check outputs a report to the directory {files}/sanity
                                                and if inconsistencies are found in the db, it writes an emergency
                                                backup to the same directory.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="watchdog">
                                <xs:complexType>
                                    <xs:attribute name="output-size-limit" type="xs:integer">
                                        <xs:annotation>
                                            <xs:documentation>
                                                This attribute limits the size of XML fragments constructed
                                                using XQuery, and thus sets the maximum amount of main memory a
                                                query is allowed to use. This limit is expressed as the maximum
                                                number of nodes allowed for an in-memory DOM tree. The purpose
                                                of this option is to avoid memory shortages on the server in
                                                cases where users are allowed to run queries that produce very
                                                large output fragments.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                    <xs:attribute name="query-timeout" type="xs:integer">
                                        <xs:annotation>
                                            <xs:documentation>
                                                This attribute sets the maximum amount of time (expressed in
                                                milliseconds) that the query can take before it is killed..
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                </xs:complexType>
                            </xs:element>
                        </xs:sequence>
                        <xs:attribute name="cacheShrinkThreshold" type="xs:integer" default="10000">
                            <xs:annotation>
                                <xs:documentation>
                                    The minimum number of pages that must be read from a
                                    cache between check intervals to be not considered for
                                    shrinking. This is a measure for the "load" of the cache. Caches
                                    with high load will never be shrinked. A negative value means that
                                    shrinkage will not be performed.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="cacheSize" type="xs:string" default="48M">
                            <xs:annotation>
                                <xs:documentation>
                                    The maximum amount of memory to use for database page buffers.
                                    Each database file has an associated page buffer for B+-tree and
                                    data pages. However, the memory specified via cacheSize is shared
                                    between all page buffers. It represents an absolute maximum, which
                                    would be occupied if all page buffers were completely full.
                                    <p/>
                                    The cacheSize should typically not be more than half of the size of
                                    the JVM heap size (set by the JVM -Xmx parameter). It can be larger
                                    if you have a large-memory JVM (usually a 64bit JVM)
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="checkMaxCacheSize" type="xs:string" default="true">
                            <xs:annotation>
                                <xs:documentation>
                                    Specifies whether eXist should check the max cache size on startup
                                    and reduce it if it is too large.
                                    <p/>
                                    This value should normally be set to true.
                                    <p/>
                                    Only set this value to false if:
                                    <p/>
                                    a) You know what you are doing!
                                    b) You have a JVM with tons of memory (typically using a 64-bit
                                    JVM, which is the scenario this setting is intended for).
                                    c) You are really sure you've complied with a) and b) above.
                                    <p/>
                                    Setting this value to false may cause memory issues which may lead to
                                    database corruptions, since it disables the automated max cache size
                                    checks! You have been warned! ;-)
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="collectionCache" type="xs:string" default="24M">
                            <xs:annotation>
                                <xs:documentation>
                                    Maximum amount of memory (in megabytes) to use for collection caches.
                                    Memory calculation is just approximate. If your collections are very
                                    different in size, it might be possible that the actual amount of
                                    memory used exceeds the specified limit. You should thus be careful
                                    with this setting.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="database" type="xs:string" default="@database@">
                            <xs:annotation>
                                <xs:documentation>
                                    Selects a database backend. Currently, "native" is the only valid setting.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="doc-ids" type="xs:string" default="default">
                            <xs:annotation>
                                <xs:documentation>
                                    TODO
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="files" type="xs:string" default="webapp/WEB-INF/data">
                            <xs:annotation>
                                <xs:documentation>
                                    Path to the directory where database files are stored.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="free_mem_min" type="xs:integer" default="5">
                            <xs:annotation>
                                <xs:documentation>
                                    TODO
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="minDiskSpace" type="xs:string" default="128M">
                            <xs:annotation>
                                <xs:documentation>
                                    The amount of disk space (in megabytes) which should be available for
                                    the database to continue operations. If free disk space goes below
                                    the configured limit, eXist-db will flush all buffers to disk and
                                    switch to read-only mode in order to prevent potential data loss.
                                    Set the limit large enough to allow all pending operations to
                                    complete. Set to -1 to disable. The default is 1 gigabyte.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="nodesBuffer" type="xs:integer" default="-1">
                            <xs:annotation>
                                <xs:documentation>
                                    Size of the temporary buffer used by eXist for caching index
                                    data while indexing a document. If set to -1, eXist will use the
                                    entire free memory to buffer index entries and will flush the
                                    cache once the memory is full.
                                    <p/>
                                    If set to a value > 0, the buffer will be fixed to the given size.
                                    The specified number corresponds to the number of nodes the
                                    buffer can hold, in thousands. Usually, a good default could be
                                    nodesBuffer="1000".
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="pageSize" type="xs:integer" default="4096">
                            <xs:annotation>
                                <xs:documentation>
                                    The size of one page on the disk. This is the smallest unit
                                    transferred from and to the database files. Should be a multiple of
                                    the operating system's file system page size (usually 4096).
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="posix-chown-restricted" type="xs:boolean" default="true">
                            <xs:annotation>
                                <xs:documentation>
                                    As defined by POSIX.1 for _POSIX_CHOWN_RESTRICTED.
                                    <p/>
                                    When posix-chown-restricted="true" (the default) then:
                                    1. Only a superuser process can change the user ID of the file.
                                    2. A non-superuser process can change the group ID of the file
                                    if the process owns the file (the effective user ID equals
                                    the user ID of the file), and group equals either the
                                    effective group ID of the process or one of the
                                    process’s supplementary group IDs.
                                    This means that when posix-chown-restricted="true", you can’t change
                                    the user ID of your files. You can change the group ID of files that
                                    you own, but only to groups that you belong to.
                                    <p/>
                                    When posix-chown-restricted="false" you can change the user ID of
                                    any file that you own, effectively "giving away the file" to
                                    another user. Such a setting has negative security implications,
                                    further details can be seen in the "Rationale" section for the
                                    chown function in the POSIX.1-2017 (Issue 7, 2018 edition) standard.
                                    See: http://pubs.opengroup.org/onlinepubs/9699919799/functions/chown.html#tag_16_59_07
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="preserve-on-copy" type="xs:boolean" default="false">
                            <xs:annotation>
                                <xs:documentation>
                                    When copying Collections and Documents within the database, the
                                    default (`false`), is not to preserve their attributes
                                    (modification time, mode, user-id, group-id, and ACL).
                                    <p/>
                                    <b>NOTE:</b> Not preserving attributes, is inline with both the GNU and
                                    BSD `cp` commands, and therefore expected behaviour; The target
                                    Collection or Document is created following the rules of the
                                    target parent, and the effective user and their umask.
                                    <p/>
                                    Setting preserve-on-copy="true" changes the default behaviour
                                    so that the target Collection or Document of a copy, has the same
                                    attributes as the source.
                                    <p/>
                                    The preserve-on-copy setting can be overridden on a case-by-case
                                    basis by setting the `preserve` flag to either `true` or `false`
                                    when calling xmldb:copy(), or via any other API that supports copy.
                                    Omitting the preserve flag when calling a copy operation, implies
                                    the behaviour that is set in this configuration.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="lock-manager">
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="lock-table">
                                <xs:complexType>
                                    <xs:attribute name="disabled" type="xs:boolean" default="false">
                                        <xs:annotation>
                                            <xs:documentation>
                                                Disables the database lock table which tracks database locks. The Lock Table is enabled by default
                                                and allows reporting on database locking via JMX.
                                                <p/>
                                                <b>NOTE:</b> Tracking locks via the Lock Table imposes a small overhead per-Lock. Once users
                                                have finished testing their system to ensure correct operation, they may wish to disable
                                                this in production to ensure the absolute best performance.
                                                <p/>
                                                This can also be set via the Java System Properties `org.exist.lock-manager.lock-table.disabled`,
                                                or (legacy) `exist.locktable.disable`.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                    <xs:attribute name="trace-stack-depth" type="xs:int" default="0">
                                        <xs:annotation>
                                            <xs:documentation>
                                                When set above 0, this captures n frames of each threads stack that performs a try/lock/release
                                                operation. These frames are visible from JMX reporting.
                                                In addition, when the logging level for the Lock Table is set in log4j2.xml to TRACE the lock
                                                events are written to the locks.log file.
                                                <p/>
                                                This can also be set via the Java System Properties `org.exist.lock-manager.lock-table.trace-stack-depth`,
                                                or (legacy) `exist.locktable.trace.stack.depth`.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="document">
                                <xs:complexType>
                                    <xs:attribute name="use-path-locks" type="xs:boolean" default="false">
                                        <xs:annotation>
                                            <xs:documentation>
                                                Set to true to have documents participate in the same hierarchical
                                                path based locking strategy as Collections.
                                                <p/>
                                                This has a performance and concurrency impact, but will ensure
                                                that you cannot have deadlocks between Collections and Documents.
                                                <p/>
                                                <b>NOTE:</b> in future this will likely be set to `true` by default.
                                                <p/>
                                                This can also be set via the Java System Property `org.exist.lock-manager.document.use-path-locks`.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                </xs:complexType>
                            </xs:element>
                        </xs:sequence>
                        <xs:attribute name="paths-multi-writer" type="xs:boolean" default="false">
                            <xs:annotation>
                                <xs:documentation>
                                    Set to true to enable Multi-Writer/Multi-Reader semantics for
                                    the database Collection/Document Hierarchy as opposed to the default (false)
                                    for Single-Writer/Multi-Reader.
                                    <p/>
                                    <b>NOTE:</b> Whilst enabling Multiple-Writers on the Collection and Document Hierarchy can improve concurrent
                                    through-put for write-heavy workloads, it can also can lead to deadlocks unless the User's
                                    Collection Hierarchy is carefully designed to isolate query/database writes between Collection combs.
                                    It is highly recommended that users leave this as the default setting. For more information, see:
                                    "Locking and Cache Improvements for eXist-db", 2018-02-05, Section "Attempt 6" Page 58 -
                                    https://www.evolvedbinary.com/technical-reports/exist-db/locking-and-cache-improvements/
                                    <p/>
                                    This can also be set via the Java System Properties `org.exist.lock-manager.paths-multiple-writers`,
                                    or (legacy) `exist.lockmanager.paths-multiwriter`.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="upgrade-check" type="xs:boolean" default="false">
                            <xs:annotation>
                                <xs:documentation>
                                    Used by developers for diagnosing illegal lock upgrade issues. When enabled
                                    checks for lock upgrading within the same thread, i.e. READ_LOCK -> WRITE_LOCK
                                    are enabled. When an illegal upgrade is detected a LockException is thrown.
                                    Such behaviour will likely corrupt any database writes, and should only be
                                    used by developers when debugging database issues.
                                    <p/>
                                    This can also be set via the Java System Properties `org.exist.lock-manager.upgrade-check`,
                                    or (legacy) `exist.lockmanager.upgrade.check`.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="warn-wait-on-read-for-write" type="xs:boolean" default="false">
                            <xs:annotation>
                                <xs:documentation>
                                    Used by developers for diagnosing lock performance issues. When enabled
                                    checks for detecting when a thread wants to acquire the WRITE_LOCK
                                    but another thread holds the READ_LOCK are enabled. When such operations
                                    are detected a log message is written to locks.log at WARN level.
                                    <p/>
                                    This can also be set via the Java System Properties `org.exist.lock-manager.warn-wait-on-read-for-write`,
                                    or (legacy) `exist.lockmanager.warn.waitonreadforwrite`.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="repository">
                    <xs:complexType>
                        <xs:attribute name="root" type="xs:string" default="/db/apps">
                            <xs:annotation>
                                <xs:documentation>
                                    The root collection for deployed applications. Application collections will be saved below
                                    this collection.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="binary-manager">
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="cache">
                                <xs:complexType>
                                    <xs:attribute name="class" type="xs:string" use="required">
                                        <xs:annotation>
                                            <xs:documentation>
                                                Defines the class to use to Cache InputStreams when reading binary documents
                                                from the database or from a read once source such as a http request (e.g. request:get-data()).
                                                There are currently three options available:

                                                - org.exist.util.io.FileFilterInputStreamCache
                                                Default. Temporary binary streams are cached to a temporary file on disk.

                                                - org.exist.util.io.MemoryMappedFileFilterInputStreamCache
                                                Temporary binary streams are cached to a temporary file on disk which
                                                has been mapped into memory. Faster than FileFilterInputStreamCache.
                                                Not reliable on Windows platforms.

                                                - org.exist.util.io.MemoryFilterInputStreamCache
                                                Temporary binary streams are cached in memory.
                                                This is the fastest approach. However it can result in out of memory
                                                errors under heavy load or if using large binary files.

                                                Where temporary files are used, they will be deleted after use.
                                                However, due to a bug in the JVM on Windows platforms, temporary files cannot be deleted, so instead
                                                they are re-cycled and re-used and deleted if the database is restarted.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                </xs:complexType>
                            </xs:element>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
                <xs:element name="indexer">
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="modules">
                                <xs:complexType>
                                    <xs:sequence>
                                        <xs:element name="module" maxOccurs="unbounded">
                                            <xs:complexType>
                                                <xs:attribute name="id" type="xs:string" default="ngram-index">
                                                    <xs:annotation>
                                                        <xs:documentation>
                                                            Unique identifier for the module
                                                        </xs:documentation>
                                                    </xs:annotation>
                                                </xs:attribute>
                                                <xs:attribute name="class" type="xs:string" default="org.exist.indexing.impl.NGramIndex">
                                                    <xs:annotation>
                                                        <xs:documentation>
                                                            The full class name of the module implementation
                                                        </xs:documentation>
                                                    </xs:annotation>
                                                </xs:attribute>
                                                <xs:attribute name="file" type="xs:string" default="ngram.dbx">
                                                    <xs:annotation>
                                                        <xs:documentation>
                                                            The index file name
                                                        </xs:documentation>
                                                    </xs:annotation>
                                                </xs:attribute>
                                                <xs:attribute name="connectionTimeout" type="xs:integer" default="10000">
                                                    <xs:annotation>
                                                        <xs:documentation>
                                                            The connection timeout
                                                        </xs:documentation>
                                                    </xs:annotation>
                                                </xs:attribute>
                                                <xs:attribute name="flushAfter" type="xs:integer" default="300">
                                                    <xs:annotation>
                                                        <xs:documentation>
                                                            TODO
                                                        </xs:documentation>
                                                    </xs:annotation>
                                                </xs:attribute>
                                                <xs:attribute name="n" type="xs:integer" default="3">
                                                    <xs:annotation>
                                                        <xs:documentation>
                                                            TODO
                                                        </xs:documentation>
                                                    </xs:annotation>
                                                </xs:attribute>
                                                <xs:attribute name="buffer" type="xs:integer" default="32">
                                                    <xs:annotation>
                                                        <xs:documentation>
                                                            The buffer size
                                                        </xs:documentation>
                                                    </xs:annotation>
                                                </xs:attribute>
                                            </xs:complexType>
                                        </xs:element>
                                    </xs:sequence>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="index">
                                <xs:complexType>
                                    <xs:sequence>
                                        <xs:element name="create" minOccurs="0" maxOccurs="unbounded">
                                            <xs:complexType>
                                                <xs:attribute name="path" type="xs:string" use="optional">
                                                    <xs:annotation>
                                                        <xs:documentation>
                                                            TODO
                                                        </xs:documentation>
                                                    </xs:annotation>
                                                </xs:attribute>
                                                <xs:attribute name="qname" type="xs:string" use="optional">
                                                    <xs:annotation>
                                                        <xs:documentation>
                                                            TODO
                                                        </xs:documentation>
                                                    </xs:annotation>
                                                </xs:attribute>
                                                <xs:attribute name="type" type="xs:anySimpleType">
                                                    <xs:annotation>
                                                        <xs:documentation>
                                                            TODO
                                                        </xs:documentation>
                                                    </xs:annotation>
                                                </xs:attribute>
                                            </xs:complexType>
                                        </xs:element>
                                    </xs:sequence>
                                </xs:complexType>
                            </xs:element>
                        </xs:sequence>
                        <xs:attribute name="caseSensitive" type="yes_no" default="yes">
                            <xs:annotation>
                                <xs:documentation>
                                    Should equality comparisons between strings be case-sensitive or
                                    insensitive: "yes" or "no".
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="index-depth" type="xs:integer" default="5">
                            <xs:annotation>
                                <xs:documentation>
                                    Defines the maximum nesting depth of nodes which will be indexed
                                    in the DOM index. Nodes below the specified nesting depth will
                                    not be indexed in the DOM file. This has only an effect when
                                    retrieving query results or for some types of XPath subexpressions,
                                    like equality comparisons.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="preserve-whitespace-mixed-content" type="yes_no" default="no">
                            <xs:annotation>
                                <xs:documentation>
                                    Preserve the white space inside a mixed content node: "yes" or "no".
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="suppress-whitespace" default="both">
                            <xs:annotation>
                                <xs:documentation>
                                    Should leading or trailing whitespace be removed from a text node?
                                    Set to "leading", "trailing", "both" or "none".
                                    Changing the parameter will only have an effect on newly loaded
                                    files, not old ones.
                                </xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="leading"/>
                                    <xs:enumeration value="trailing"/>
                                    <xs:enumeration value="both"/>
                                    <xs:enumeration value="none"/>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="scheduler">
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="job" minOccurs="0" maxOccurs="unbounded">
                                <xs:complexType>
                                    <xs:sequence>
                                        <xs:element ref="parameter" minOccurs="0" maxOccurs="unbounded"/>
                                    </xs:sequence>
                                    <xs:attribute name="type" use="optional" default="user">
                                        <xs:annotation>
                                            <xs:documentation>
                                                The type of the job to schedule. Must be either "system"
                                                or "user".

                                                system - System jobs require the database to be in a consistent state.
                                                All database operations will be stopped until the method returns or
                                                throws an exception. Any exception will be caught and a warning written to
                                                the log.

                                                user - User jobs may be scheduled at any time and may be mutually exclusive
                                                or non-exclusive
                                            </xs:documentation>
                                        </xs:annotation>
                                        <xs:simpleType>
                                            <xs:restriction base="xs:string">
                                                <xs:enumeration value="startup"/>
                                                <xs:enumeration value="system"/>
                                                <xs:enumeration value="user"/>
                                            </xs:restriction>
                                        </xs:simpleType>
                                    </xs:attribute>
                                    <xs:attribute name="name" type="xs:string" use="optional">
                                        <xs:annotation>
                                            <xs:documentation>
                                                The name of the job
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                    <xs:attribute name="class" type="xs:string" use="optional">
                                        <xs:annotation>
                                            <xs:documentation>
                                                If the job is written in Java then this should be the name of the
                                                class that extends either org.exist.storage.SystemTask or
                                                org.exist.scheduler.UserJavaJob
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                    <xs:attribute name="xquery" type="xs:string" use="optional">
                                        <xs:annotation>
                                            <xs:documentation>
                                                If the job is written in XQuery (not suitable for system jobs) then
                                                this should be a path to an XQuery stored in the database. e.g.
                                                /db/myCollection/myJob.xql
                                                XQuery job's will be launched under the guest account initially,
                                                although the running XQuery may switch permissions through
                                                calls to xmldb:login().
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                    <xs:attribute name="cron-trigger" type="xs:string"
                                        use="optional">
                                        <xs:annotation>
                                            <xs:documentation>
                                                To define a firing pattern for the Job using Cron style syntax
                                                use this attribute otherwise for a periodic job use the period
                                                attribute. Not applicable to startup jobs.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                    <xs:attribute name="unschedule-on-exception" type="yes_no" use="optional" default="yes">
                                        <xs:annotation>
                                            <xs:documentation>
                                                Boolean: yes/true, no/false. Default: true. If true and an exception is
                                                encountered then the job is unscheduled for further execution until a
                                                restart; otherwise, the exception is ignored.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                    <xs:attribute name="period" type="xs:string" use="optional">
                                        <xs:annotation>
                                            <xs:documentation>
                                                Can be used to define an explicit period for firing the job instead
                                                of a Cron style syntax. The period should be in milliseconds.
                                                Not applicable to startup jobs.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                    <xs:attribute name="delay" type="xs:long" use="optional">
                                        <xs:annotation>
                                            <xs:documentation>
                                                Can be used with a period to delay the start of a job. If unspecified jobs
                                                will start as soon as the database and scheduler are initialised.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                    <xs:attribute name="repeat" type="xs:integer" use="optional">
                                        <xs:annotation>
                                            <xs:documentation>
                                                Can be used with a period to define for how many periods a job should be
                                                executed. If unspecified jobs will repeat for every period indefinitely.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                </xs:complexType>
                            </xs:element>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
                <xs:element name="parser">
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="xml" minOccurs="0">
                                <xs:complexType>
                                    <xs:sequence>
                                        <xs:element name="features" minOccurs="0">
                                            <xs:complexType>
                                                <xs:sequence>
                                                    <xs:element name="feature" minOccurs="0" maxOccurs="unbounded">
                                                        <xs:complexType>
                                                            <xs:attribute name="name" use="required" type="xs:string">
                                                                <xs:annotation>
                                                                    <xs:documentation>
                                                                        The name of the feature flag
                                                                    </xs:documentation>
                                                                </xs:annotation>
                                                            </xs:attribute>
                                                            <xs:attribute name="value" use="required" type="xs:boolean">
                                                                <xs:annotation>
                                                                    <xs:documentation>
                                                                        The value of the feature flag
                                                                    </xs:documentation>
                                                                </xs:annotation>
                                                            </xs:attribute>
                                                        </xs:complexType>
                                                    </xs:element>
                                                </xs:sequence>
                                            </xs:complexType>
                                        </xs:element>
                                    </xs:sequence>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="html-to-xml" minOccurs="0">
                                <xs:complexType>
                                    <xs:sequence>
                                        <xs:element name="properties" minOccurs="0">
                                            <xs:complexType>
                                                <xs:sequence>
                                                    <xs:element name="property" minOccurs="0" maxOccurs="unbounded">
                                                        <xs:complexType>
                                                            <xs:attribute name="name" use="required" type="xs:string">
                                                                <xs:annotation>
                                                                    <xs:documentation>
                                                                        The name of the property
                                                                    </xs:documentation>
                                                                </xs:annotation>
                                                            </xs:attribute>
                                                            <xs:attribute name="value" use="required" type="xs:string">
                                                                <xs:annotation>
                                                                    <xs:documentation>
                                                                        The value of the property
                                                                    </xs:documentation>
                                                                </xs:annotation>
                                                            </xs:attribute>
                                                        </xs:complexType>
                                                    </xs:element>
                                                </xs:sequence>
                                            </xs:complexType>
                                        </xs:element>
                                        <xs:element name="features" minOccurs="0">
                                            <xs:complexType>
                                                <xs:sequence>
                                                    <xs:element name="feature" minOccurs="0" maxOccurs="unbounded">
                                                        <xs:complexType>
                                                            <xs:attribute name="name" use="required" type="xs:string">
                                                                <xs:annotation>
                                                                    <xs:documentation>
                                                                        The name of the feature flag
                                                                    </xs:documentation>
                                                                </xs:annotation>
                                                            </xs:attribute>
                                                            <xs:attribute name="value" use="required" type="xs:boolean">
                                                                <xs:annotation>
                                                                    <xs:documentation>
                                                                        The value of the feature flag
                                                                    </xs:documentation>
                                                                </xs:annotation>
                                                            </xs:attribute>
                                                        </xs:complexType>
                                                    </xs:element>
                                                </xs:sequence>
                                            </xs:complexType>
                                        </xs:element>
                                    </xs:sequence>
                                    <xs:attribute name="class" use="required" type="xs:string">
                                        <xs:annotation>
                                            <xs:documentation>
                                                The Java classname of a parser which implements org.xml.sax.XMLReader
                                                and is capable of parsing HTML and emitting an XML Sax Stream.
                                                <p/>
                                                Whichever library you use for this, it must be present on the classpath
                                                perhaps the best way to do this is to place it into $EXIST_HOME/lib/user
                                                <p/>
                                                Examples include:
                                                - org.codelibs.nekohtml.parsers.SAXParser
                                                The Cyber NekoHTML parser from https://sourceforge.net/projects/nekohtml/
                                                <p/>
                                                - org.ccil.cowan.tagsoup.Parser
                                                The TagSoup parser from http://home.ccil.org/~cowan/XML/tagsoup/
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                </xs:complexType>
                            </xs:element>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
                <xs:element name="serializer">
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="custom-filter" minOccurs="0" maxOccurs="unbounded">
                                <xs:complexType>
                                    <xs:attribute name="class" type="xs:string">
                                        <xs:annotation>
                                            <xs:documentation>
                                                The class implementing the custom filter
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                </xs:complexType>
                            </xs:element>
                        </xs:sequence>
                        <xs:attribute name="add-exist-id" default="none">
                            <xs:annotation>
                                <xs:documentation>
                                    For debugging: add an exist:id attribute to every element, showing
                                    the internal node identifier (as a long int) assigned to this node.
                                    Possible values are: "none", "element", "all". "all" displays the
                                    node of every element node; "element" displays the id only for the
                                    root nodes of the returned XML fragments.
                                </xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="all"/>
                                    <xs:enumeration value="element"/>
                                    <xs:enumeration value="none"/>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute name="compress-output" type="yes_no" default="no">
                            <xs:annotation>
                                <xs:documentation>
                                    Should the output be compressed when serializing documents?
                                    Sometimes useful with remote clients.
                                    Remember to add a statement like this to your client code:
                                    service.setProperty("compress-output", "yes");
                                    to uncompress the retrieved result in the client too.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="omit-xml-declaration" type="yes_no" default="yes">
                            <xs:annotation>
                                <xs:documentation>
                                    Should the XML Declaration for a document be serialized
                                    if it is present?
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="omit-original-xml-declaration" type="yes_no" default="no">
                            <xs:annotation>
                                <xs:documentation>
                                    Should the original persisted XML Declaration for a document be serialized
                                    if it is present?
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="output-doctype" type="yes_no" default="yes">
                            <xs:annotation>
                                <xs:documentation>
                                    Should the Doctype Declaration for a document be serialized
                                    if it is present?
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="enable-xinclude" type="yes_no" default="yes">
                            <xs:annotation>
                                <xs:documentation>
                                    Should the database expand XInclude tags by default?
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="enable-xsl" type="yes_no" default="no">
                            <xs:annotation>
                                <xs:documentation>
                                    Should the database evaluate XSL processing instructions
                                    when serializing documents?
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="indent" type="yes_no" default="yes">
                            <xs:annotation>
                                <xs:documentation>
                                    Should the serializer pretty-print (indent) XML?
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="match-tagging-attributes" type="yes_no" default="no">
                            <xs:annotation>
                                <xs:documentation>
                                    Matches for attribute values can also be tagged using the character
                                    sequence "||" to demarcate the matching text string. Since this
                                    changes the content of the attribute value, the feature is disabled
                                    by default.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="match-tagging-elements" type="yes_no" default="yes">
                            <xs:annotation>
                                <xs:documentation>
                                    The database can highlight matches in the text content of a node by
                                    tagging the matching text string with &lt;exist:match&gt;. Clearly, this
                                    only works for XPath expressions using the some indexes.
                                    <p/>
                                    Set the parameter to "yes" to enable this feature.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="transformer">
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="attribute" minOccurs="0" maxOccurs="unbounded">
                                <xs:complexType>
                                    <xs:attribute name="name" type="xs:string">
                                        <xs:annotation>
                                            <xs:documentation>
                                                The attribute name
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                    <xs:attribute name="value" type="xs:string">
                                        <xs:annotation>
                                            <xs:documentation>
                                                The attribute value
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                    <xs:attribute name="type" default="string">
                                        <xs:annotation>
                                            <xs:documentation>
                                                The attribute type
                                            </xs:documentation>
                                        </xs:annotation>
                                        <xs:simpleType>
                                            <xs:restriction base="xs:string">
                                                <xs:enumeration value="boolean"/>
                                                <xs:enumeration value="integer"/>
                                                <xs:enumeration value="string"/>
                                            </xs:restriction>
                                        </xs:simpleType>
                                    </xs:attribute>
                                </xs:complexType>
                            </xs:element>
                        </xs:sequence>
                        <xs:attribute name="class" type="xs:string" default="org.apache.xalan.processor.TransformerFactoryImpl">
                            <xs:annotation>
                                <xs:documentation>
                                    The name of the class that implements javax.xml.transform.TransformerFactory
                                    <p/>
                                    for Saxon (XSLT 2.0 support):
                                    - "net.sf.saxon.TransformerFactoryImpl"
                                    <p/>
                                    for Xalan (XSLT 1.0 support):
                                    - "org.apache.xalan.processor.TransformerFactoryImpl"
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="caching" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>
                                    You can enable or disable xsl caching by this option.
                                    This option is set to "yes" by default.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="validation">
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="entity-resolver">
                                <xs:complexType>
                                    <xs:sequence>
                                        <xs:element name="catalog" minOccurs="1" maxOccurs="unbounded">
                                            <xs:complexType>
                                                <xs:attribute name="uri" type="xs:string" default="webapp/WEB-INF/catalog.xml">
                                                    <xs:annotation>
                                                        <xs:documentation>
                                                            The URI pointing to the according catalog
                                                        </xs:documentation>
                                                    </xs:annotation>
                                                </xs:attribute>
                                            </xs:complexType>
                                        </xs:element>
                                    </xs:sequence>
                                </xs:complexType>
                            </xs:element>
                        </xs:sequence>
                        <xs:attribute name="mode" default="auto">
                            <xs:annotation>
                                <xs:documentation>
                                    should XML source files be validated against a schema or DTD before
                                    storing them? The setting is passed to the XML parser. The actual
                                    effects depend on the parser you use. eXist comes with Xerces which
                                    can validate against both: schemas and DTDs.
                                    <p/>
                                    Possible values: "yes", "no", "auto". "auto" will leave validation
                                    to the parser.
                                </xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="auto"/>
                                    <xs:enumeration value="no"/>
                                    <xs:enumeration value="yes"/>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="xquery">
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="builtin-modules">
                                <xs:complexType>
                                    <xs:sequence>
                                        <xs:element name="module" maxOccurs="unbounded">
                                            <xs:complexType>
                                                <xs:sequence>
                                                    <xs:element ref="parameter" minOccurs="0" maxOccurs="unbounded"/>
                                                </xs:sequence>
                                                <xs:attribute name="class" type="xs:string">
                                                    <xs:annotation>
                                                        <xs:documentation>
                                                            TODO
                                                        </xs:documentation>
                                                    </xs:annotation>
                                                </xs:attribute>
                                                <xs:attribute name="uri" type="xs:anyURI">
                                                    <xs:annotation>
                                                        <xs:documentation>
                                                            TODO
                                                        </xs:documentation>
                                                    </xs:annotation>
                                                </xs:attribute>
                                                <xs:attribute name="src" type="xs:string">
                                                    <xs:annotation>
                                                        <xs:documentation>
                                                            TODO
                                                        </xs:documentation>
                                                    </xs:annotation>
                                                </xs:attribute>
                                            </xs:complexType>
                                        </xs:element>
                                    </xs:sequence>
                                </xs:complexType>
                            </xs:element>
                        </xs:sequence>
                        <xs:attribute name="enable-java-binding" type="yes_no" default="no">
                            <xs:annotation>
                                <xs:documentation>
                                    eXist supports calls to arbitrary Java methods from within
                                    XQuery. Setting to "yes" might introduce a security risk.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="disable-deprecated-functions" type="yes_no" default="no">
                            <xs:annotation>
                                <xs:documentation>
                                    Set to "yes" to disable deprecated functions
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="enable-query-rewriting" type="yes_no" default="yes">
                            <xs:annotation>
                                <xs:documentation>
                                    Set to "yes" to enable the new query-rewriting optimizer. This
                                    is work in progress and may lead to incorrect queries. Use at your
                                    own risk.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="backwardCompatible" type="yes_no" default="no">
                            <xs:annotation>
                                <xs:documentation>
                                    Set to "yes" to enable backward compatibility (untyped argument
                                    checks for instance)
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="raise-error-on-failed-retrieval" type="yes_no" default="no">
                            <xs:annotation>
                                <xs:documentation>
                                    When set to "strict", eXist will not use a range index unless all
                                    collections in the context sequence define it. When set to
                                    "always", the query engine will still use an index, even if only
                                    one collection has it defined. It thus leaves it to the user to
                                    properly define indexes and if you forget to specify an index on
                                    a particular collection, it will be missing in the results.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="enforce-index-use" default="strict">
                            <xs:annotation>
                                <xs:documentation>
                                    Set to "yes" if a call to doc(), xmldb:document(), collection() or
                                    xmldb:xcollection() should raise an error (FODC0002) when an
                                    XML resource can not be retrieved.
                                    Set to "no" if a call to doc(), xmldb:document(), collection() or
                                    xmldb:xcollection() should return an empty sequence when an
                                    XML resource can not be retrieved.
                                </xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="always"/>
                                    <xs:enumeration value="strict"/>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="xupdate">
                    <xs:complexType>
                        <xs:attribute name="allowed-fragmentation" type="xs:integer" default="5">
                            <xs:annotation>
                                <xs:documentation>
                                    Defines the maximum number of page splits allowed within a document
                                    before a defragmentation run will be triggered.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="enable-consistency-checks" type="yes_no" default="no">
                            <xs:annotation>
                                <xs:documentation>
                                    For debugging only. If the parameter is set to "yes", a consistency
                                    check will be run on every modified document after every XUpdate
                                    request. It checks if the persistent DOM is complete and all
                                    pointers in the structural index point to valid storage addresses
                                    containing valid nodes.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="growth-factor" type="xs:integer" default="20">
                            <xs:annotation>
                                <xs:documentation>
                                    TODO
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="saxon">
                    <xs:annotation>
                        <xs:documentation>
                            Load this configuration into Saxon
                        </xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:attribute name="configuration-file" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>
                                    If `configuration-file` is a relative filename, it is relative to $EXIST_HOME/etc
                                    (this is the same directory as the eXist-db configuration file `conf.xml`)
                                    `configuration-file` may also be an absolute filename.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="rpc-server">
                    <xs:annotation>
                        <xs:documentation>
                            Defines the RPC server backend specific options used to process the requests.
                        </xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="content-file">
                                <xs:annotation>
                                    <xs:documentation>
                                        Defines per document specific cache settings.
                                    </xs:documentation>
                                </xs:annotation>
                                <xs:complexType>
                                    <xs:attribute name="in-memory-size" type="xs:integer" default="4196">
                                     <xs:annotation>
                                         <xs:documentation>
                                             Defines the maximum amount of bytes stored in memory for each content file instance.
                                         </xs:documentation>
                                     </xs:annotation>
                                    </xs:attribute>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="content-file-pool">
                                <xs:annotation>
                                    <xs:documentation>
                                        Defines content file pool handling.
                                    </xs:documentation>
                                </xs:annotation>
                                <xs:complexType>
                                    <xs:attribute name="size" type="xs:integer" default="-1">
                                        <xs:annotation>
                                            <xs:documentation>
                                                Defines the maximum content file pool size. If this size is exhausted an error is thrown. Using -1 sets no limit.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                    <xs:attribute name="max-idle" type="xs:integer" default="5">
                                        <xs:annotation>
                                            <xs:documentation>
                                                Defines the maximum amount of idle pool entries that will not be removed for later reuse.
                                            </xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                </xs:complexType>
                            </xs:element>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

</xs:schema>
